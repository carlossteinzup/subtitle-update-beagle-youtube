1
00:00:00.440 --> 00:00:03,050
Hi guys my name is Hector and I'm

two
00:00:03,050 --> 00:00:05,090
here again to talk about

3
00:00:05,090 --> 00:00:07,100
Beagle. If you don't know

4
00:00:07,100 --> 00:00:09,110
Beagle is an open source framework

5
00:00:09,110 --> 00:00:11,240
developed by Zup Innovation company. Beagle

6
00:00:11,240 --> 00:00:13.339
incorporate the concept of server driven ui

7
00:00:13,339 --> 00:00:16,700
in Mobile and Web applications, this means

8
00:00:16,700 --> 00:00:18,740
a backend configured with Beagle sends a JSON schema with

9
00:00:18,740 --> 00:00:20.390
a bunch of components and the Frontend

10
00:00:20.390 --> 00:00:22.910
interprets this schema to build the Screen layout

11
00:00:22.910 --> 00:00:25,130
This funcionality prevents you

12
00:00:25,130 --> 00:00:26,600
to keep changing your application front-end code

13
00:00:26,600 --> 00:00:28.490
whenever you need to

14
00:00:28.490 --> 00:00:30.710
make a modification, which will reduce

15
00:00:30,710 --> 00:00:32,570
a lot the number of deploys you

16
00:00:32,570 --> 00:00:34.730
need to do. To help with this,

17
00:00:34.730 --> 00:00:36.409
Beagle offers several default components

18
00:00:36,409 --> 00:00:38.659
that we can use to

19
00:00:38.659 --> 00:00:40.670
assemble our screen. If you want to know about

20
00:00:40.670 --> 00:00:42,620
all components, just have a look

21
00:00:42,620 --> 00:00:44.870
at Beagle documentation (links on the description). Everything is finely

22
00:00:44.870 --> 00:00:46.760
explained with examples that you can

23
00:00:46.760 --> 00:00:48.679
test. But today I want to talk about a

24
00:00:48.679 --> 00:00:51.559
component in particular, which is the List View.

25
00:00:51,559 --> 00:00:53,960
It is easy to use and makes it very simple when

26
00:00:53,960 --> 00:00:56,210
creating layouts in the form of a listing

27
00:00:56,210 --> 00:00:58.879
or "carousel" but the coolest thing about it, is that

28
00:00:58.879 --> 00:01:02.010
it features various Beagle (Server driven) concepts and

29
00:01:02.010 --> 00:01:04.769
will learn a lot more about the Beagle Framework. Well that is enough

30
00:01:04,769 --> 00:01:08,480
theory! let's code!

31
00:01:08.950 --> 00:01:10.970
[Song]

32
00:01:10.970 --> 00:01:13.290
I'm already here with my code

33
00:01:13,290 --> 00:01:14,790
open and for this video we will

34
00:01:14,790 --> 00:01:17,010
need two things: 1 Backend already

35
00:01:17,010 --> 00:01:18.930
configured with the Beagle library and 1

36
00:01:18.930 --> 00:01:20.880
Front-end, this last one could be configured

37
00:01:20,880 --> 00:01:23,580
in Android, IOS or WEB. Here I have

38
00:01:23,580 --> 00:01:25.440
used web with React to show the results

39
00:01:25,440 --> 00:01:27,540
about this component in our code her.

40
00:01:27,540 --> 00:01:29.580
Another point that motivated this example

41
00:01:29.580 --> 00:01:31,680
is the fact that it shows

42
00:01:31,680 --> 00:01:34,500
how we can configure Beagle usage

43
00:01:34,500 --> 00:01:36,330
on multiple screens, that is, we don't need

44
00:01:36,330 --> 00:01:38.790
create an endpoint just for an entire

45
00:01:38,790 --> 00:01:40,110
application. The ideal point here is that we

46
00:01:40,110 --> 00:01:43.710
componentize and just pass parts of a screen (components) to

47
00:01:43,710 --> 00:01:45,570
our Frontend. That is much better

48
00:01:45,570 --> 00:01:47.610
since it is much easier

49
00:01:47,610 --> 00:01:49,500
to control what to render. Okay, so let's create our

50
00:01:49,500 --> 00:01:51,950
Builder who will make our list

51
00:01:51,950 --> 00:01:54,259
Let's create a file in Kotlin I will

52
00:01:54,259 --> 00:01:56,360
call it ListViewBuilder

53
00:01:56,360 --> 00:01:57,070


54
00:01:57,070 --> 00:02:00,070
That is it

55
00:02:03,220 --> 00:02:05,120
Our class is created so let's go and

56
00:02:05,120 --> 00:02:07.610
extend it from the "ScreenBuilder" class

57
00:02:07.610 --> 00:02:09,979
which is a Beagle class

58
00:02:09,979 --> 00:02:12,140
That also helps us create the screen

59
00:02:12,140 --> 00:02:14,180
to get everything "typed" and more organized

60
00:02:14,180 --> 00:02:16,550
When we put the "ScreenBuilder" there

61
00:02:16,550 --> 00:02:18,500
It informs us that we need to create a

62
00:02:18,500 --> 00:02:21.760
method for a class called "Build"

63
00:02:21.760 --> 00:02:24.909
This Build method returns a "Screen" type component that will

64
00:02:24,909 --> 00:02:26.680
be our main component and a

65
00:02:26.680 --> 00:02:29,379
"parent" component that will embed the list

66
00:02:29,379 --> 00:02:31,349
So let's return a "Screen" here

67
00:02:31,349 --> 00:02:34.810
typing return and Screen() . This component

68
00:02:34.810 --> 00:02:36.519
has a property (attribute) that

69
00:02:36.519 --> 00:02:39.069
calls a "Child" component. This property receives a

70
00:02:39.069 --> 00:02:41,079
Beagle component and this is where we

71
00:02:41,079 --> 00:02:42.879
will put our list. Here

72
00:02:42.879 --> 00:02:45.489
we're going to separate it into parts of

73
00:02:45.489 --> 00:02:47.409
the list configuration. In this way, it gets more

74
00:02:47.409 --> 00:02:49.989
easy to show list properties and it's easier for

75
00:02:49.989 --> 00:02:51,069
you to understand what's going on

76
00:02:51,069 --> 00:02:53.379
in each part, right? So let's create

77
00:02:53,379 --> 00:02:55,230
a function here

78
00:02:55,230 --> 00:02:58.409
that will create the list

79
00:02:58.409 --> 00:03:01,019
I'm going to create a private function because I'm just going to

80
00:03:01,019 --> 00:03:03,810
use it here within this class

81
00:03:03,810 --> 00:03:07.489
I'll call it "createListViewComponent"

82
00:03:07.489 --> 00:03:10.680
This function will return me

83
00:03:10.680 --> 00:03:13.890
a ListView

84
00:03:13,890 --> 00:03:15,300
[Song]

85
00:03:15,300 --> 00:03:17,700
We set this function the same way as above, we are returning a

86
00:03:17,700 --> 00:03:20.070
component. So here

87
00:03:20,070 --> 00:03:22,460
I will return a ListView

88
00:03:22,460 --> 00:03:24.630
This is the point where we start making the

89
00:03:24.630 --> 00:03:26.040
list. So the first thing you

90
00:03:26.040 --> 00:03:28,110
have to ask yourself is: To create a list

91
00:03:28,110 --> 00:03:29,850
we need to load the data from some

92
00:03:29.850 --> 00:03:31.440
place right? We need to provide

93
00:03:31,440 --> 00:03:33,660
some information to create a list.

94
00:03:33,660 --> 00:03:36,000
In our case I will do

95
00:03:36,000 --> 00:03:37.920
a request and load information from an endpoint

96
00:03:37.920 --> 00:03:39.930
which will return a JSON with information to

97
00:03:39.930 --> 00:03:42.210
build our list. Although, it is possible to create

98
00:03:42,210 --> 00:03:43,980
a local list using a Context (context is a funcionality from Beagle)

99
00:03:43,980 --> 00:03:45,870
we prefered to use a response data to show more

100
00:03:45,870 --> 00:03:47,700
about Beagle features. I will make a request

101
00:03:47,700 --> 00:03:50.580
to the Backend using an endpoint, right?

102
00:03:50.580 --> 00:03:52.890
So I'll use a property from ListView

103
00:03:52.890 --> 00:03:55.640
called "onInit"

104
00:03:55,640 --> 00:03:59,250
This property accepts a list of

105
00:03:59,250 --> 00:04:01.560
actions that will be performed every time a list is started.

106
00:04:01.560 --> 00:04:03.210
These actions will be written inside

107
00:04:03,210 --> 00:04:05,280
here and I'll put an action here that

108
00:04:05,280 --> 00:04:07.490
it's called "SendRequest"

109
00:04:07,490 --> 00:04:10,700
This action accepts a

110
00:04:10,700 --> 00:04:15,140
method and then in my case it will be a GET

111
00:04:15,140 --> 00:04:16.630


112
00:04:16.630 --> 00:04:19.608
and it also accepts a URL to make

113
00:04:19.608 --> 00:04:22.400
a request. This URL is

114
00:04:22,400 --> 00:04:25,340
a mock I made already

115
00:04:25,340 --> 00:04:27,230
with information that

116
00:04:27,230 --> 00:04:29,330
I want to use to fill the list. This is where you

117
00:04:29.330 --> 00:04:31.640
put the "endpoint" where you go

118
00:04:31.640 --> 00:04:33.440
to get your data. The response to this request

119
00:04:33,440 --> 00:04:35,000
will bring us a JSON like this one on the screen

120
00:04:35,000 --> 00:04:37,610
It's a list of puppies that

121
00:04:37,610 --> 00:04:39.590
has attributes name, age, photo and

122
00:04:39.590 --> 00:04:41.960
personality, ok? It's just to test

123
00:04:41,960 --> 00:04:44.030
the list. Recap here, when

124
00:04:44.030 --> 00:04:45.380
my list start I make a

125
00:04:45,380 --> 00:04:48,230
request to that endpoint. And then I get

126
00:04:48,230 --> 00:04:49.820
a result that will bring information so that I

127
00:04:49.820 --> 00:04:51.980
can fill that list, right? I downloaded

128
00:04:51,980 --> 00:04:53,720
this information, all right, but I

129
00:04:53,720 --> 00:04:55.490
I need to save this successful answer

130
00:04:55,490 --> 00:04:57,620
somewhere and to save this

131
00:04:57,620 --> 00:04:59,660
I'm going to declare a Context for my Screen...

132
00:04:59.660 --> 00:05:02.330
The Context is a

133
00:05:02.330 --> 00:05:04.220
another Beagle feature, which is fine

134
00:05:04,220 --> 00:05:05,870
documented. To understand it easier

135
00:05:05,870 --> 00:05:08,780
note that the Context is nothing more than a

136
00:05:08,780 --> 00:05:11,270
variable that saves states. It will save

137
00:05:11,270 --> 00:05:12,800
the state of a component, so that

138
00:05:12,800 --> 00:05:14.630
all child components

139
00:05:14,630 --> 00:05:17,310
of this component will be able to

140
00:05:17,310 --> 00:05:17,90
get the context from their father and

141
00:05:17.90 --> 00:05:20.310
the values of itÂ´s content

142
00:05:20,310 --> 00:05:23.129
I'll declare a context here

143
00:05:23.129 --> 00:05:25.919
and I'm going to call it "Content" and it's going to be the

144
00:05:25.919 --> 00:05:26.779
contents

145
00:05:26.779 --> 00:05:31.759
from my list with an id = "content"

146
00:05:31.759 --> 00:05:34.769
The value attribute

147
00:05:34.769 --> 00:05:36.449
I'll be left empty because the list component hasn't started yet.

148
00:05:36,449 --> 00:05:39,209
Then, since I already have my context

149
00:05:39,209 --> 00:05:42.239
called "content" and I already created the

150
00:05:42.239 --> 00:05:44.699
method to load a list... Now

151
00:05:44.699 --> 00:05:46.889
I need to save the result of this

152
00:05:46,889 --> 00:05:49,319
request within my context so

153
00:05:49,319 --> 00:05:50.759
that I can use this information

154
00:05:50.759 --> 00:05:53,099
and fill up my component. Then,

155
00:05:53,099 --> 00:05:55.919
the request method accepts

156
00:05:55.919 --> 00:05:59.669
a property that calls "onSuccess" and

157
00:05:59.669 --> 00:06:01.229
in this property we will declare a list of

158
00:06:01,229 --> 00:06:03.539
actions to call on success. Now I'll

159
00:06:03,539 --> 00:06:07,159
use the "setContext" action

160
00:06:07,220 --> 00:06:10,310
This action asks

161
00:06:10,310 --> 00:06:12,140
a context id, which will define the context to

162
00:06:12,140 --> 00:06:15,590
save our information

163
00:06:15,590 --> 00:06:17,780
which in our case here is the "content"

164
00:06:17,780 --> 00:06:21,150
and the value is the content information I want to save

165
00:06:21,150 --> 00:06:23,590
Here we will save the response

166
00:06:23,590 --> 00:06:26,490
success,

167
00:06:26,490 --> 00:06:29,290
in my context. So this is

168
00:06:29,290 --> 00:06:32,790
where I made the request for the

169
00:06:32,790 --> 00:06:35,140
context i will set, and where the information is being saved

170
00:06:35,140 --> 00:06:37,350
so that we can access the list information.

171
00:06:37,350 --> 00:06:39.910
[song]

172
00:06:39.910 --> 00:06:41.740
Another thing we must do

173
00:06:41,740 --> 00:06:44,110
now is to define that

174
00:06:44,110 --> 00:06:46,450
the "child" property of my screen will receive

175
00:06:46,450 --> 00:06:48,580
a server driven component, which is my list

176
00:06:48,580 --> 00:06:51,630
Here I'm going to call the function that builds the list

177
00:06:51,630 --> 00:06:54.710
and type in the name "createListViewComponent()"

178
00:06:54,710 --> 00:06:57,350
and it will work

179
00:06:57,350 --> 00:07:00,170
Here it calls the

180
00:07:00,170 --> 00:07:02,270
function that loads and assembles a list that

181
00:07:02,270 --> 00:07:04,580
I did it, ok?... Now we will

182
00:07:04,580 --> 00:07:05,810
continue to create the ListView component, ok?

183
00:07:05,810 --> 00:07:07.970
It needs to receive one more

184
00:07:07.970 --> 00:07:10.310
important property that is the "data source" this

185
00:07:10,310 --> 00:07:12,500
property defines the

186
00:07:12,500 --> 00:07:14,420
data that will fill our list, then

187
00:07:14.420 --> 00:07:15.680
as we already made the request

188
00:07:15.680 --> 00:07:17.480
saving the data in a context, here we will declare

189
00:07:17.480 --> 00:07:20.530
the context that contains our Data Source

190
00:07:20.530 --> 00:07:23.660
So let's configure it saying it's an expression

191
00:07:23,660 --> 00:07:27.970
and put the name of the Context here

192
00:07:28,100 --> 00:07:30,510
[Song]

193
00:07:30,510 --> 00:07:32,260
[Song]

194
00:07:32,260 --> 00:07:34,400
[Song]

195
00:07:34,400 --> 00:07:36.830
Now, let's set the last property

196
00:07:36,830 --> 00:07:39,120
necessary to finish our

197
00:07:39,120 --> 00:07:42,390
list, which is the "templates" property. That

198
00:07:42.390 --> 00:07:44.580
property accepts another list of

199
00:07:44,580 --> 00:07:47,160
components, since we can have

200
00:07:47,160 --> 00:07:49,410
different items (templates) in a list. Each item is represented by a

201
00:07:49,410 --> 00:07:51,180
component. You may

202
00:07:51,180 --> 00:07:52,650
load a text in one item, and

203
00:07:52,650 --> 00:07:54,540
an image in another. With a template we can

204
00:07:54,540 --> 00:07:55,950
control it, and that's what

205
00:07:55,950 --> 00:07:58,320
we call "multiple templates"

206
00:07:58,320 --> 00:08:00,270
As I said earlier, I'm going to separate each piece

207
00:08:00,270 --> 00:08:02,100
of the component creation in functions, because

208
00:08:02,100 --> 00:08:04,500
it's easier to see and

209
00:08:04,500 --> 00:08:06,120
to keep the code clean.

210
00:08:06,120 --> 00:08:07.980
I'm going to declare another function that will create the

211
00:08:07.980 --> 00:08:10.380
templates that are missing there

212
00:08:10.380 --> 00:08:12,270
in the ListView. So I'm going to declare a function

213
00:08:12,270 --> 00:08:16.020
called "createTemplates" that will

214
00:08:16.020 --> 00:08:21.820
return a "List" of "Templates"

215
00:08:21,820 --> 00:08:24,640
Now we will set it to

216
00:08:24,640 --> 00:08:27,160
return our templates list

217
00:08:27,160 --> 00:08:30,090
She expects a list of templates

218
00:08:30,090 --> 00:08:31,919
and let's start here with the first

219
00:08:31,919 --> 00:08:34,260
template, which will have two

220
00:08:34,260 --> 00:08:36,750
properties. One of them is the view, which is a

221
00:08:36,750 --> 00:08:38,520
any component, which can be a

222
00:08:38.520 --> 00:08:40.860
simple or complex (see compose component in documentation).

223
00:08:40,860 --> 00:08:43,770
I'll start by creating a text...

224
00:08:43.770 --> 00:08:45.779
A simple text component. I'll put it here

225
00:08:45,779 --> 00:08:47,540


226
00:08:47,540 --> 00:08:50,160
The other property is the condition

227
00:08:50,160 --> 00:08:52,350
for when to use this template

228
00:08:52,350 --> 00:08:55,110
Once created the function

229
00:08:55,110 --> 00:08:57.779
that returns the templates I just have to declare it here

230
00:08:57,779 --> 00:08:59,400
inside my list then the

231
00:08:59,400 --> 00:09:01,290
template property expects a list

232
00:09:01.290 --> 00:09:03.420
of templates that will be returned in the

233
00:09:03.420 --> 00:09:07,080
function, ok? Here I am

234
00:09:07,080 --> 00:09:08.910
I've already made the

235
00:09:08.910 --> 00:09:10.529
service function

236
00:09:10.529 --> 00:09:12.930
to create the component endpoint. So this is

237
00:09:12.930 --> 00:09:14.610
the creation of a simple endpoint, ok?

238
00:09:14,610 --> 00:09:16,170
So I called the Builder class here in the class

239
00:09:16,170 --> 00:09:19,350
Service and in a Class Controller I made the endpoint

240
00:09:19,350 --> 00:09:21,900
called "/listview" which is where

241
00:09:21,900 --> 00:09:24.630
my list will be called. With that done we

242
00:09:24.630 --> 00:09:27,360
only have to access my FrontEnd, which in my example

243
00:09:27,360 --> 00:09:30,100
is a project React where I will configure the endpoint

244
00:09:30,100 --> 00:09:33.519
that will be called. All this is

245
00:09:33.519 --> 00:09:35.470
part of the basic Beagle setup and

246
00:09:35,470 --> 00:09:37.389
is available in the documentation listed in the details

247
00:09:37,389 --> 00:09:42,819
I saved it and now we hope to run the application

248
00:09:42,819 --> 00:09:48,220
let's open the browser

249
00:09:48.750 --> 00:09:50.930
and enter the endpoint address (after running the backend)

250
00:09:50.930 --> 00:09:52.830
And the list will be loaded.

251
00:09:52,830 --> 00:09:56,100
Notice that I put the fixed value for text and it appeared

252
00:09:56,100 --> 00:09:58,650
as "My List" as default

253
00:09:58,650 --> 00:10:00,060
Another detail from the list that I'm going to

254
00:10:00,060 --> 00:10:01.350
show here is a property called

255
00:10:01.350 --> 00:10:04.170
"Direction", in it we define

256
00:10:04.170 --> 00:10:06.300
the direction in which the list will be

257
00:10:06.300 --> 00:10:09.330
created. The default direction is

258
00:10:09.330 --> 00:10:11.430
vertical but we can change it to

259
00:10:11.430 --> 00:10:13.830
horizontal as follows.

260
00:10:13,830 --> 00:10:18,530
The direction property accepts a constant value

261
00:10:18,710 --> 00:10:19.870
called "ListDirection.HORIZONTAL"

262
00:10:19.870 --> 00:10:23.390
After this modification, let's run the application again.

263
00:10:23.390 --> 00:10:26.450
Once this is done, we go to

264
00:10:26,450 --> 00:10:29,180
our browser and update the page...

265
00:10:29,180 --> 00:10:32,620
Okay, the list has changed direction, see?

266
00:10:32,620 --> 00:10:35.090
Now that the list is

267
00:10:35.090 --> 00:10:36.920
working, we were able to load the list information

268
00:10:36.920 --> 00:10:39.140
by putting a fixed value but we still need

269
00:10:39,140 --> 00:10:40,970
adjust it and get values from the context

270
00:10:40.970 --> 00:10:42.620
The list is functional and responding

271
00:10:42,620 --> 00:10:44,720
properly when configured. So we already have

272
00:10:44,720 --> 00:10:47,060
A good start! Now in the final part is to

273
00:10:47,060 --> 00:10:48.830
improve the list by placing a

274
00:10:48.830 --> 00:10:50.600
template a little more complex to show

275
00:10:50,600 --> 00:10:52,160
more features than this list components

276
00:10:52,160 --> 00:10:54,080
can provide. The first one is

277
00:10:54,080 --> 00:10:56,000
that I need to load my data

278
00:10:56,000 --> 00:10:58,370
huh? I made the request, loaded an

279
00:10:58,370 --> 00:11:00,680
object, my answer and now i want

280
00:11:00,680 --> 00:11:04,040
show this information within the list Ok? let's remember

281
00:11:04,040 --> 00:11:06.020
how does our

282
00:11:06.020 --> 00:11:08,840
object works. There are several objects in one

283
00:11:08,840 --> 00:11:11,000
vector of the objects and each of them has attributes

284
00:11:11,000 --> 00:11:13,760
Name, Age, Photo and Personality, so I

285
00:11:13.760 --> 00:11:16.430
I can access these properties here.

286
00:11:16,430 --> 00:11:18,320
The first thing I'm going to do is set

287
00:11:18,320 --> 00:11:19.670
an "iterator" for my list

288
00:11:19.670 --> 00:11:22,220
The property that receives this iterator ID is the iteratorName

289
00:11:22,220 --> 00:11:24,260
Since it is a list of

290
00:11:24,260 --> 00:11:26,150
puppies, I'll put the name "dog" as iterator

291
00:11:26,150 --> 00:11:30,240
Ok? So, each object will have this

292
00:11:30,240 --> 00:11:31,950
name "dog", which allows me to access the

293
00:11:31,950 --> 00:11:34.740
object properties by this name

294
00:11:34.740 --> 00:11:37,080
Let's do a test? Let's change the "my list"

295
00:11:37.080 --> 00:11:38.819
on here

296
00:11:38.819 --> 00:11:42.410
which is already loaded

297
00:11:42.450 --> 00:11:43.730
to "@{dog.name}"

298
00:11:43,730 --> 00:11:48,570
Which is the property set

299
00:11:48,570 --> 00:11:52,350
on the object. Let's save the modification and wait to go up

300
00:11:52,350 --> 00:11:56,220
Again, let's go to our

301
00:11:56,220 --> 00:11:58,280
Frontend application and we just need

302
00:11:58,280 --> 00:12:01,530
update and here is the result, the names are unspaced

303
00:12:01.530 --> 00:12:03.750
But you can see that the names changed, right?

304
00:12:03.750 --> 00:12:05.450
So, the name of each of the animals is listed

305
00:12:05.450 --> 00:12:07.590
I forgot to say that if we do not

306
00:12:07.590 --> 00:12:09.540
pass an "iteratorName"

307
00:12:09.540 --> 00:12:13.380
Beagle

308
00:12:13,380 --> 00:12:15,300
will define a default iteratorName called "item".

309
00:12:15,300 --> 00:12:17,760
So if you don't want to pass an iteratorName

310
00:12:17,760 --> 00:12:19,770
the field name would have to be "@{item.name}"

311
00:12:19,770 --> 00:12:22.980
We'll leave the iterator as "dog" because it makes

312
00:12:22.980 --> 00:12:25.440
our code clean. Now I'm going to make an

313
00:12:25,440 --> 00:12:27.450
improvement in this component's layout

314
00:12:27,450 --> 00:12:29,220
We have already learned how

315
00:12:29,220 --> 00:12:31,200
load the list and how to use the items

316
00:12:31,200 --> 00:12:33,990
that we loaded from that URL with a mock

317
00:12:33.990 --> 00:12:35.970
so now I'm going to show you how

318
00:12:35.970 --> 00:12:38.430
to improve this list and how

319
00:12:38,430 --> 00:12:40,260
can we use another template property

320
00:12:40,260 --> 00:12:42.090
that I said was missing before.

321
00:12:42.090 --> 00:12:44,290
We know that this view here waits for a

322
00:12:44,290 --> 00:12:45,790
component and I said it could be a

323
00:12:45,790 --> 00:12:48.040
simple component, such as text, or a

324
00:12:48.040 --> 00:12:49.930
more complex component... So I did

325
00:12:49.930 --> 00:12:52.870
a function here that builds a complex component and I'll copy it

326
00:12:52,870 --> 00:12:55,360
here. This function looks a little scary (Large)

327
00:12:55,360 --> 00:12:57,610
But it is very simple indeed...

328
00:12:57,610 --> 00:12:59.710
It represents the creation of a component

329
00:12:59,710 --> 00:13:01,570
a litle more complex. So I'm creating a

330
00:13:01,570 --> 00:13:04,270
component that I called "card". He has

331
00:13:04,270 --> 00:13:06,160
a container and inside that container I

332
00:13:06,160 --> 00:13:07.990
have other components. In my case

333
00:13:07.990 --> 00:13:10.360
My card have: an image, three texts and

334
00:13:10.360 --> 00:13:12.760
a button and I list those here in

335
00:13:12,760 --> 00:13:15,760
properties. So, for the image, I list the

336
00:13:15,760 --> 00:13:18,190
URL that's there in my object, so this is where I define the photo

337
00:13:18,190 --> 00:13:21,700
Here, I declare the name, age and

338
00:13:21,700 --> 00:13:23.710
personality. So in the same way as

339
00:13:23.710 --> 00:13:26.080
I taught how to bind for

340
00:13:26.080 --> 00:13:28,240
each of the items earlier, now we can

341
00:13:28,240 --> 00:13:30,640
replace it for another item. I can say that this

342
00:13:30.640 --> 00:13:31.830
template

343
00:13:31.830 --> 00:13:35.320
calls the function that creates a template that

344
00:13:35.320 --> 00:13:37.860
is called "Card component" right?

345
00:13:37,860 --> 00:13:42,110
Let's run here and let's go here to

346
00:13:42,110 --> 00:13:43,149
the frontend

347
00:13:43,149 --> 00:13:44.709
and update

348
00:13:44,709 --> 00:13:49,310
and check that our front is loaded, ok. I did

349
00:13:49,310 --> 00:13:51,290
a card and all this here is coming from our

350
00:13:51,290 --> 00:13:53.930
object, the name, age, photo, everything is

351
00:13:53.930 --> 00:13:56.029
filling out our card. We applied a

352
00:13:56.029 --> 00:13:57.709
little style on the card, and then it was like this

353
00:13:57,709 --> 00:14:00,500
Now a really cool thing is that besides us

354
00:14:00,500 --> 00:14:52,180
being able to make multiple templates, for example

355
00:14:52,180 --> 00:14:03.529
We could show a card here

356
00:14:03.529 --> 00:14:06.829
with only an image and here something else, I

357
00:14:06.829 --> 00:14:08.600
could do that with Beagle. This functionality

358
00:14:08.600 --> 00:14:10.310
allows me to give some

359
00:14:10.310 --> 00:14:12,019
highlight for one of these cards... So if

360
00:14:12,019 --> 00:14:14,209
for example I want to change the style

361
00:14:14,209 --> 00:14:16,190
from the first card, i can

362
00:14:16,190 --> 00:14:18,230
do this only using Beagle, got it?

363
00:14:18,230 --> 00:14:20.570
This is were we use a property that I

364
00:14:20.570 --> 00:14:22.250
I told you about for the multiple templates. Then

365
00:14:22,250 --> 00:14:25,040
let's recap... Here we receive a

366
00:14:25,040 --> 00:14:27,140
list of templates. I'm passing a single

367
00:14:27,140 --> 00:14:29,000
one. But if I want to, I could

368
00:14:29,000 --> 00:14:31.070
pass two or more templates

369
00:14:31,070 --> 00:14:34,130
So I'm going to pass another template here, which will be

370
00:14:34,130 --> 00:14:36,560
another view, and what I'll call it

371
00:14:36,560 --> 00:14:38,300
Cart component, because I'm going to reuse this

372
00:14:38,300 --> 00:14:40,250
function. Then let's make a change

373
00:14:40.250 --> 00:14:42.740
here for me to accept a parameter that will define

374
00:14:42,740 --> 00:14:45.020
a template and

375
00:14:45.020 --> 00:14:46.750
when it's another template I use another parameter

376
00:14:46,750 --> 00:14:49.190
So let's change our function here

377
00:14:49,190 --> 00:14:52,280
that creates a component to accept a parameter

378
00:14:52,280 --> 00:14:55.690
which I'll call "backgroundCustom"

379
00:14:55.690 --> 00:14:58.730
and it's going to be a String. Then I set the function to

380
00:14:58.730 --> 00:15:00,740
accept a parameter so I could configure my

381
00:15:00,740 --> 00:15:02,270
templates for: If something happens

382
00:15:02,270 --> 00:15:04.400
I want to use one

383
00:15:04.400 --> 00:15:06.660
parameter, if it doesn't happen I want to use another

384
00:15:06,660 --> 00:15:09,089
We'll set a

385
00:15:09,089 --> 00:15:10.940
color for

386
00:15:10.940 --> 00:15:14,290
this card

387
00:15:14,290 --> 00:15:17,390
and another color for this other card

388
00:15:17,390 --> 00:15:19,180
and down there

389
00:15:19.180 --> 00:15:22.800
we set the color of

390
00:15:22.800 --> 00:15:26.029
the container, right. I'll pass

391
00:15:26.029 --> 00:15:29.560
my variable

392
00:15:29,560 --> 00:15:32,460
So here we are calling a template

393
00:15:32,460 --> 00:15:35,560
passing a color to each, but

394
00:15:35.560 --> 00:15:37.720
what happens so far is... I'm passing a color to

395
00:15:37,720 --> 00:15:39,279
each card but I'm not talking about the condition that defines

396
00:15:39,279 --> 00:15:42.070
when I want one color or another. So, that's where

397
00:15:42.070 --> 00:15:45.690
we talk about the last of the property that

398
00:15:45.690 --> 00:15:49.649
make up the list, which is the "case". This property

399
00:15:49.649 --> 00:15:52,199
sets a condition

400
00:15:52,199 --> 00:15:54,600
to use this list. So when this

401
00:15:54,600 --> 00:15:57,059
condition is true, this view will be used

402
00:15:57,059 --> 00:15:59,069
if it is not true, then the

403
00:15:59,069 --> 00:16:01,319
next view is checked, and so on. If you don't declare a

404
00:16:01,319 --> 00:16:04,019
case, the pattern looks like this: This

405
00:16:04,019 --> 00:16:06.819
case here, it takes an expression (a type of variable used in Beagle)

406
00:16:06,819 --> 00:16:09,420
which will convert the parameter received string

407
00:16:09,420 --> 00:16:12,149
into a value

408
00:16:12,149 --> 00:16:14.490
which is saved in the object.

409
00:16:14.490 --> 00:16:18.860
Another feature of Beagle used here is operations

410
00:16:18.860 --> 00:16:20.410
And here we will use one, the "equals"

411
00:16:20.410 --> 00:16:21.699
That is, with it I define

412
00:16:21,699 --> 00:16:25,019
that when the "dog.name" is

413
00:16:25,019 --> 00:16:28,310
equal to "Pluto"

414
00:16:28,310 --> 00:16:30,340
equal to "Pluto"

415
00:16:30,880 --> 00:16:34.040
use this template. So when this

416
00:16:34,040 --> 00:16:36,470
condition is met, use this template, if not.

417
00:16:36,470 --> 00:16:40,960
the template property checks for the next option. Let's go

418
00:16:41,370 --> 00:16:46,209
save it and refresh the page

419
00:16:46,209 --> 00:16:48,550
And that's it, the color changed, see? the other cards

420
00:16:48,550 --> 00:16:49.990
continue with the old template

421
00:16:49.990 --> 00:16:52.089
and this one I chose

422
00:16:52.089 --> 00:16:54.850
because his name is "Pluto" changed the background

423
00:16:54.850 --> 00:16:57.689
This is how we can

424
00:16:57,689 --> 00:17:00,069
mix multiple templates, multiple features and

425
00:17:00,069 --> 00:17:03,429
practices to achieve what we need

426
00:17:03,429 --> 00:17:05,709
That's it guys, the list view is very cool, right!

427
00:17:05,709 --> 00:17:08,679
So you know, click on like and subscribe

428
00:17:08.679 --> 00:17:10.898
on the channel! Any questions, comments or suggestions may be done down here

429
00:17:10,898 --> 00:17:14,158
or on our forums! Thank you and see you next time
