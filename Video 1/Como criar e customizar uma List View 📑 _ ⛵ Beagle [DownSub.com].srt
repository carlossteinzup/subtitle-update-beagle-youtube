1
00:00:00,440 --> 00:00:03,050
Oi Oi pessoal meu nome é Hector e eu tô

2
00:00:03,050 --> 00:00:05,090
aqui novamente para falar com você sobre

3
00:00:05,090 --> 00:00:07,100
o Beagle. Se você ainda não conhece o

4
00:00:07,100 --> 00:00:09,110
Beagle é uma biblioteca open source

5
00:00:09,110 --> 00:00:11,240
desenvolvida pela Zup e ela serve para

6
00:00:11,240 --> 00:00:13,339
incorporar o conceito de server driven ui

7
00:00:13,339 --> 00:00:16,700
em aplicações Mobile e Web, isso quer

8
00:00:16,700 --> 00:00:18,740
dizer que o back-end envia um esquema JSON com

9
00:00:18,740 --> 00:00:20,390
os componentes e o Frontend

10
00:00:20,390 --> 00:00:22,910
interpreta ese esquema para montar o layout

11
00:00:22,910 --> 00:00:25,130
da tela. Isso faz com que você não

12
00:00:25,130 --> 00:00:26,600
precise ficar alterando o código do

13
00:00:26,600 --> 00:00:28,490
front-end toda vez que precisar

14
00:00:28,490 --> 00:00:30,710
fazer uma modificação, o que vai reduzir

15
00:00:30,710 --> 00:00:32,570
muito o número de deploys que você

16
00:00:32,570 --> 00:00:34,730
precisa fazer. Para ajudar nisso o

17
00:00:34,730 --> 00:00:36,409
Beagle oferece vários componentes

18
00:00:36,409 --> 00:00:38,659
pré-definidos que a gente pode usar para

19
00:00:38,659 --> 00:00:40,670
montar nossa tela. Se você quer conhecer

20
00:00:40,670 --> 00:00:42,620
todos os componentes é só dar uma olhada

21
00:00:42,620 --> 00:00:44,870
na documentação tem tudo lá bem

22
00:00:44,870 --> 00:00:46,760
explicado e com exemplos para você

23
00:00:46,760 --> 00:00:48,679
testar. Mas hoje eu quero falar de um

24
00:00:48,679 --> 00:00:51,559
componente em especial, que é o List View.

25
00:00:51,559 --> 00:00:53,960
Ele é fácil de usar e torna muito simples a

26
00:00:53,960 --> 00:00:56,210
criação de layouts em forma de listagem

27
00:00:56,210 --> 00:00:58,879
ou "carousel" mas o mais legal dele é que

28
00:00:58,879 --> 00:01:02,010
ele apresenta vários conceitos do Beagle e

29
00:01:02,010 --> 00:01:04,769
a gente aprende muito mais sobre a ferramenta. Bom agora chega de

30
00:01:04,769 --> 00:01:08,480
teoria e vamos pro código

31
00:01:08,950 --> 00:01:10,970
[Música]

32
00:01:10,970 --> 00:01:13,290
Eu já estou aqui com meu código

33
00:01:13,290 --> 00:01:14,790
aberto e para esse vídeo a gente vai

34
00:01:14,790 --> 00:01:17,010
precisar de duas coisas: 1 Backend já

35
00:01:17,010 --> 00:01:18,930
configurado com a biblioteca Beagle e 1

36
00:01:18,930 --> 00:01:20,880
Front-end também podendo, esse ultimo

37
00:01:20,880 --> 00:01:23,580
ser Android, IOS ou WEb. Aqui eu vou

38
00:01:23,580 --> 00:01:25,440
usar um web com o React para mostrar o

39
00:01:25,440 --> 00:01:27,540
resultado do nosso código aqui.

40
00:01:27,540 --> 00:01:29,580
Outro ponto que motivou o uso

41
00:01:29,580 --> 00:01:31,680
desse projeto aqui é porque dá para a gente

42
00:01:31,680 --> 00:01:34,500
ver como podemos separar o uso do Beagle

43
00:01:34,500 --> 00:01:36,330
em várias telas, ou seja, não precisamos

44
00:01:36,330 --> 00:01:38,790
criar um endpoint só para toda a nossa

45
00:01:38,790 --> 00:01:40,110
aplicação. O ideal é que a gente

46
00:01:40,110 --> 00:01:43,710
componentize e só passe os "pedaços" (componentes) para o

47
00:01:43,710 --> 00:01:45,570
nosso Frontend o que fica muito

48
00:01:45,570 --> 00:01:47,610
melhor é muito mais fácil também de

49
00:01:47,610 --> 00:01:49,500
controlar. Tá bom vamos criar então o nosso

50
00:01:49,500 --> 00:01:51,950
Builder que vai fazer a nossa lista

51
00:01:51,950 --> 00:01:54,259
Vamos criar um arquivo em Kotlin que eu vou

52
00:01:54,259 --> 00:01:56,360
chamar de ListViewBuilder

53
00:01:56,360 --> 00:01:57,070


54
00:01:57,070 --> 00:02:00,070


55
00:02:03,220 --> 00:02:05,120
A nossa classe esta criada a nos vamos

56
00:02:05,120 --> 00:02:07,610
extende-la a partir da classe "ScreenBuilder"

57
00:02:07,610 --> 00:02:09,979
que é uma classe do Beagle

58
00:02:09,979 --> 00:02:12,140
também ele ajuda a gente a criar a tela

59
00:02:12,140 --> 00:02:14,180
para ficar tudo "tipado" e mais bonitinho

60
00:02:14,180 --> 00:02:16,550
Quando a gente coloca ali o "ScreenBuilder"

61
00:02:16,550 --> 00:02:18,500
Ele informa que precisamos criar um

62
00:02:18,500 --> 00:02:21,760
método para classe que é o "Build"

63
00:02:21,760 --> 00:02:24,909
Esse método Build retorna uma "Screen" que vai

64
00:02:24,909 --> 00:02:26,680
ser o nosso componente principal ou seja um

65
00:02:26,680 --> 00:02:29,379
componente "pai" que vai incorporar a lista

66
00:02:29,379 --> 00:02:31,349
Então vamos retornar uma "Screen" aqui

67
00:02:31,349 --> 00:02:34,810
digitando return e Screen () . E esse componente

68
00:02:34,810 --> 00:02:36,519
tem uma propriedade (atributo) que se

69
00:02:36,519 --> 00:02:39,069
chama "Child". Essa propriedade recebe um

70
00:02:39,069 --> 00:02:41,079
componente Beagle e é aqui que a gente

71
00:02:41,079 --> 00:02:42,879
vai colocar nossa lista. Aqui

72
00:02:42,879 --> 00:02:45,489
nos vamos separar em funções

73
00:02:45,489 --> 00:02:47,409
cada pedacinho da lista. Dessa forma, fica mais

74
00:02:47,409 --> 00:02:49,989
fácil para mostrar e fica mais fácil de

75
00:02:49,989 --> 00:02:51,069
você entender o que está acontecendo

76
00:02:51,069 --> 00:02:53,379
em cada parte certo? Então vamos criar

77
00:02:53,379 --> 00:02:55,230
aqui uma função

78
00:02:55,230 --> 00:02:58,409
que vai criar a lista

79
00:02:58,409 --> 00:03:01,019
Eu vou criar uma função privada pois só vou

80
00:03:01,019 --> 00:03:03,810
usa-la aqui dentro dessa classe mesmo eu

81
00:03:03,810 --> 00:03:07,489
vou chama-la de "createListViewComponent"

82
00:03:07,489 --> 00:03:10,680
Essa função vai me retornar

83
00:03:10,680 --> 00:03:13,890
um ListView

84
00:03:13,890 --> 00:03:15,300
[Música]

85
00:03:15,300 --> 00:03:17,700
Aqui configuramos igual acima, estamos retornando um

86
00:03:17,700 --> 00:03:20,070
componente e é só ir montando. Então aqui eu

87
00:03:20,070 --> 00:03:22,460
vou retornar uma ListView

88
00:03:22,460 --> 00:03:24,630
Aqui a gente começa a fazer a

89
00:03:24,630 --> 00:03:26,040
lista. Então a primeira coisa que a gente

90
00:03:26,040 --> 00:03:28,110
tem que se perguntar é: Para criar uma lista a

91
00:03:28,110 --> 00:03:29,850
gente precisa carregar os dados de algum

92
00:03:29,850 --> 00:03:31,440
lugar certo? A gente precisa fornecer

93
00:03:31,440 --> 00:03:33,660
informação para lista ser criada.

94
00:03:33,660 --> 00:03:36,000
No nosso caso eu vou fazer

95
00:03:36,000 --> 00:03:37,920
uma requisição e carregar uma lista de um endpoint

96
00:03:37,920 --> 00:03:39,930
que vai retornar um JSON com informações para

97
00:03:39,930 --> 00:03:42,210
formar nossa lista. Aqui você até poderoa criar

98
00:03:42,210 --> 00:03:43,980
uma lista local utilizando um contexto, por exemplo

99
00:03:43,980 --> 00:03:45,870
porém nesse caso aqui e para mostrar mais

100
00:03:45,870 --> 00:03:47,700
funcionalidades do Beagle eu vou fazer uma requisição

101
00:03:47,700 --> 00:03:50,580
para o Backend usando um endpoint né?

102
00:03:50,580 --> 00:03:52,890
Então, uma propriedade que o ListView

103
00:03:52,890 --> 00:03:55,640
aceitar é o onInit

104
00:03:55,640 --> 00:03:59,250
Essa propriedade aceita uma lista de

105
00:03:59,250 --> 00:04:01,560
ações que será executada toda vez uma lista for iniciada.

106
00:04:01,560 --> 00:04:03,210
Essas ações serão escritas aqui

107
00:04:03,210 --> 00:04:05,280
dentro e aqui eu vou colocar uma ação que

108
00:04:05,280 --> 00:04:07,490
se chama "SendRequest"

109
00:04:07,490 --> 00:04:10,700
Essa ação aceita um

110
00:04:10,700 --> 00:04:15,140
método e aí no meu caso vai ser um GET

111
00:04:15,140 --> 00:04:16,630


112
00:04:16,630 --> 00:04:19,608
e ela aceita também uma URL para fazer

113
00:04:19,608 --> 00:04:22,400
uma requisição. Essa URL é

114
00:04:22,400 --> 00:04:25,340
um mock que eu fiz já

115
00:04:25,340 --> 00:04:27,230
com as informações que

116
00:04:27,230 --> 00:04:29,330
eu quero usar para preencher a lista. É aqui que você

117
00:04:29,330 --> 00:04:31,640
coloca o "endpoint" de onde você vai

118
00:04:31,640 --> 00:04:33,440
carregar os seus dados. A resposta dessa requisição

119
00:04:33,440 --> 00:04:35,000
vai me trazer um JSON igual a esse aqui na tela

120
00:04:35,000 --> 00:04:37,610
É uma lista de cachorrinhos que

121
00:04:37,610 --> 00:04:39,590
tem nome, idade, uma foto e a

122
00:04:39,590 --> 00:04:41,960
personalidade do cão tá? É só pra gente testar

123
00:04:41,960 --> 00:04:44,030
mesmo a lista.  Recapitulando aqui, quando

124
00:04:44,030 --> 00:04:45,380
a minha lista iniciar eu faço uma

125
00:04:45,380 --> 00:04:48,230
requisição para esse endpoint. E aí eu vou

126
00:04:48,230 --> 00:04:49,820
ter um resultado que vai trazer informações para eu

127
00:04:49,820 --> 00:04:51,980
preencher essa lista, certo? Eu carreguei aqui

128
00:04:51,980 --> 00:04:53,720
essas informações, tudo certinho, mas eu

129
00:04:53,720 --> 00:04:55,490
preciso salvar essa resposta de sucesso

130
00:04:55,490 --> 00:04:57,620
em algum lugar e para salvar essa

131
00:04:57,620 --> 00:04:59,660
resposta eu vou declarar um Contexto para a minha Screen...

132
00:04:59,660 --> 00:05:02,330
O Contexto é uma

133
00:05:02,330 --> 00:05:04,220
outra funcionalidade do Beagle, que esta bem

134
00:05:04,220 --> 00:05:05,870
documentada. Para entende-lo de uma maneira

135
00:05:05,870 --> 00:05:08,780
fácil, o Contexto nada mais é do que uma

136
00:05:08,780 --> 00:05:11,270
variável que salva Estados. Ele vai salvar

137
00:05:11,270 --> 00:05:12,800
o estado de um componente, de forma que

138
00:05:12,800 --> 00:05:14,630
todos os componentes filhos

139
00:05:14,630 --> 00:05:17,310
desse componente vão conseguir

140
00:05:17,310 --> 00:05:17,990
enxergar o contexto do pai e

141
00:05:17,990 --> 00:05:20,310
o valores de seu conteúdo

142
00:05:20,310 --> 00:05:23,129
Eu vou colocar um contexto aqui

143
00:05:23,129 --> 00:05:25,919
e eu vou chamar ele de "Content" e ele vai ser o

144
00:05:25,919 --> 00:05:26,779
conteúdo

145
00:05:26,779 --> 00:05:31,759
da minha lista com o id = "content"

146
00:05:31,759 --> 00:05:34,769
O atributo value por enquanto eu

147
00:05:34,769 --> 00:05:36,449
vou deixar vazio porque o componente ainda não foi iniciado

148
00:05:36,449 --> 00:05:39,209
Eu já tenho o meu contexto

149
00:05:39,209 --> 00:05:42,239
chamado "content" eu já criei aqui o

150
00:05:42,239 --> 00:05:44,699
método para carregar lista. Agora

151
00:05:44,699 --> 00:05:46,889
eu preciso salvar o resultado dessa

152
00:05:46,889 --> 00:05:49,319
lista dentro do meu contexto para

153
00:05:49,319 --> 00:05:50,759
que eu possa consumir essa informação

154
00:05:50,759 --> 00:05:53,099
e preencher meu componente. Então

155
00:05:53,099 --> 00:05:55,919
aqui o método de request aceita mais

156
00:05:55,919 --> 00:05:59,669
uma propriedade que chama "onSuccess" e

157
00:05:59,669 --> 00:06:01,229
nela que listaremos uma lista de

158
00:06:01,229 --> 00:06:03,539
ações a ser chamada no caso de sucesso. Aqui vou

159
00:06:03,539 --> 00:06:07,159
usar a ação "setContext"

160
00:06:07,220 --> 00:06:10,310
E essa ação pede

161
00:06:10,310 --> 00:06:12,140
um context id, que definira o contexto onde

162
00:06:12,140 --> 00:06:15,590
salvar nossas informações

163
00:06:15,590 --> 00:06:17,780
que em nosso caso aqui é o "content"

164
00:06:17,780 --> 00:06:21,150
e o value que é o conteudo que quero salvar

165
00:06:21,150 --> 00:06:23,590
Aqui salvaremos a resposta

166
00:06:23,590 --> 00:06:26,490
do Sucesso,

167
00:06:26,490 --> 00:06:29,290
no meu contexto. Então é

168
00:06:29,290 --> 00:06:32,790
aqui que eu fiz a requisição para o

169
00:06:32,790 --> 00:06:35,140
contexto, e aqui e onde a informação foi salva

170
00:06:35,140 --> 00:06:37,350
pora que possamos acessar minha lista.

171
00:06:37,350 --> 00:06:39,910
[música]

172
00:06:39,910 --> 00:06:41,740
Outra coisa faremos

173
00:06:41,740 --> 00:06:44,110
agora é definir que

174
00:06:44,110 --> 00:06:46,450
a propriedade "child" da minha tela vai receber

175
00:06:46,450 --> 00:06:48,580
um server driven component, que é a minha lista

176
00:06:48,580 --> 00:06:51,630
Aqui vou chamar a função que constroi a lista

177
00:06:51,630 --> 00:06:54,710
e digitar o nome "createListViewComponent()"

178
00:06:54,710 --> 00:06:57,350
e ele vai funcionar

179
00:06:57,350 --> 00:07:00,170
Aqui ele chama a

180
00:07:00,170 --> 00:07:02,270
função que carrega e monta lista que eu

181
00:07:02,270 --> 00:07:04,580
fiz né... Continuando aqui a criação da lista

182
00:07:04,580 --> 00:07:05,810
nós ainda estamos criando o componente

183
00:07:05,810 --> 00:07:07,970
de ListView tá? Ele precisa receber mais uma

184
00:07:07,970 --> 00:07:10,310
propriedade importante que é o "data source" essa

185
00:07:10,310 --> 00:07:12,500
propriedade fala de onde estão vindo os

186
00:07:12,500 --> 00:07:14,420
dados que vão preencher nossa lista, então

187
00:07:14,420 --> 00:07:15,680
como já fizemos a requisição

188
00:07:15,680 --> 00:07:17,480
salvando os dados no contexto, aqui a gente vai definir

189
00:07:17,480 --> 00:07:20,530
que é o nosso "data source" é o contexto

190
00:07:20,530 --> 00:07:23,660
Então, vamos configurar aqui dizendo que é uma expression

191
00:07:23,660 --> 00:07:27,970
e colocar o nome do Contexto

192
00:07:28,100 --> 00:07:30,510
[Música]

193
00:07:30,510 --> 00:07:32,260
[Música]

194
00:07:32,260 --> 00:07:34,400
[Música]

195
00:07:34,400 --> 00:07:36,830
Agora, vamos configurar a última propriedade

196
00:07:36,830 --> 00:07:39,120
necessária para finalizar a criação da

197
00:07:39,120 --> 00:07:42,390
lista, que é a "templates". Essa

198
00:07:42,390 --> 00:07:44,580
propriedade aceita uma outra lista de

199
00:07:44,580 --> 00:07:47,160
componentes, pois podemos ter

200
00:07:47,160 --> 00:07:49,410
items diferentes em uma lista, e cada item é representado por um

201
00:07:49,410 --> 00:07:51,180
componente. Você pode

202
00:07:51,180 --> 00:07:52,650
carregar um texto em um item, e em outro

203
00:07:52,650 --> 00:07:54,540
uma imagem. Com esse template podemos

204
00:07:54,540 --> 00:07:55,950
controlar isso, e é o que

205
00:07:55,950 --> 00:07:58,320
chamamos de "múltiplos templates"

206
00:07:58,320 --> 00:08:00,270
Como eu falei anteriormente, eu vou separar cada pedaço

207
00:08:00,270 --> 00:08:02,100
da criação do componente em funções, pois

208
00:08:02,100 --> 00:08:04,500
fica mais fácil de enxergar e

209
00:08:04,500 --> 00:08:06,120
de manter o código. Aqui eu

210
00:08:06,120 --> 00:08:07,980
vou declarar outra função que vai criar os

211
00:08:07,980 --> 00:08:10,380
meus templates que faltam ali

212
00:08:10,380 --> 00:08:12,270
no ListView. Então vou declarar uma função

213
00:08:12,270 --> 00:08:16,020
chamada "createTemplates" que vai

214
00:08:16,020 --> 00:08:21,820
devolver um tipo "List" de "Template"

215
00:08:21,820 --> 00:08:24,640
Agora, começaremos a

216
00:08:24,640 --> 00:08:27,160
retornar os nossos templates

217
00:08:27,160 --> 00:08:30,090
Ela espera uma lista de templates

218
00:08:30,090 --> 00:08:31,919
e vamos começar aqui com o primeiro

219
00:08:31,919 --> 00:08:34,260
template, que terá duas

220
00:08:34,260 --> 00:08:36,750
propriedades. Uma delas é a view, que é um

221
00:08:36,750 --> 00:08:38,520
componente qualquer, podendo ser

222
00:08:38,520 --> 00:08:40,860
simples ou complexo (veja compose component na documentação).

223
00:08:40,860 --> 00:08:43,770
Vou começar criando um texto...

224
00:08:43,770 --> 00:08:45,779
Um simples componente de texto. eu vou colocar aqui

225
00:08:45,779 --> 00:08:47,540


226
00:08:47,540 --> 00:08:50,160
A outra propriedade é a condição

227
00:08:50,160 --> 00:08:52,350
para quando usar esse template

228
00:08:52,350 --> 00:08:55,110
Uma vez criada a função

229
00:08:55,110 --> 00:08:57,779
que retorna os templates é só eu declara-la aqui

230
00:08:57,779 --> 00:08:59,400
dentro na minha lista então a

231
00:08:59,400 --> 00:09:01,290
propriedade template espera uma lista

232
00:09:01,290 --> 00:09:03,420
de templates que será retornada na

233
00:09:03,420 --> 00:09:07,080
minha função certo? Aqui eu

234
00:09:07,080 --> 00:09:08,910
já deixei pronto o

235
00:09:08,910 --> 00:09:10,529
serviço

236
00:09:10,529 --> 00:09:12,930
para criar o endpoint do componente. Então essa é

237
00:09:12,930 --> 00:09:14,610
a criação de um endpoint simples tá

238
00:09:14,610 --> 00:09:16,170
então eu chamei a classe Builder aqui na classe

239
00:09:16,170 --> 00:09:19,350
Service e na Classe Controller eu fiz um endpoint

240
00:09:19,350 --> 00:09:21,900
chamado "/listview" que é onde

241
00:09:21,900 --> 00:09:24,630
minha lista será chamada. Feito isso é

242
00:09:24,630 --> 00:09:27,360
só acessar meu FrontEnd, que no meu exemplo

243
00:09:27,360 --> 00:09:30,100
é um project React onde eu configurarei o endpoint

244
00:09:30,100 --> 00:09:33,519
que será chamda. Tudo isso é

245
00:09:33,519 --> 00:09:35,470
parte da configuração básica do Beagle e

246
00:09:35,470 --> 00:09:37,389
está disponivel na documentação listada nos detalhes e nos demais videos

247
00:09:37,389 --> 00:09:42,819
desse canal. Salvei e agora a gente espera rodar a aplicação

248
00:09:42,819 --> 00:09:48,220
Vamos abrir o navegador

249
00:09:48,750 --> 00:09:50,930
e digitar o endereço do endpoint (após rodar o backend)

250
00:09:50,930 --> 00:09:52,830
E a lista será carregada.

251
00:09:52,830 --> 00:09:56,100
Aqui eu coloquei o valor fixo e apareceu

252
00:09:56,100 --> 00:09:58,650
o texto "My List" como padrão

253
00:09:58,650 --> 00:10:00,060
Outro detalhe da lista que eu vou

254
00:10:00,060 --> 00:10:01,350
mostrar aqui é propriedade

255
00:10:01,350 --> 00:10:04,170
"Direção", nela definimos

256
00:10:04,170 --> 00:10:06,300
a direção em que a lista será

257
00:10:06,300 --> 00:10:09,330
criada. Aqui a direção padrão é

258
00:10:09,330 --> 00:10:11,430
vertical mas podemos mudar para

259
00:10:11,430 --> 00:10:13,830
horizontal da seguinte forma.

260
00:10:13,830 --> 00:10:18,530
A propriedade direction aceita um valor contante

261
00:10:18,710 --> 00:10:19,870
chamado "ListDirection.HORIZONTAL"

262
00:10:19,870 --> 00:10:23,390
Após essa modificação vamos rodar a aplicação novamente.

263
00:10:23,390 --> 00:10:26,450
Feito isso a gente vai aqui no

264
00:10:26,450 --> 00:10:29,180
nosso browser e atualiza...

265
00:10:29,180 --> 00:10:32,620
Pronto, a lista mudou de direção tá vendo?

266
00:10:32,620 --> 00:10:35,090
Agora que a lista tá

267
00:10:35,090 --> 00:10:36,920
funcionando, nós conseguimos carregar a lista

268
00:10:36,920 --> 00:10:39,140
ao colocar um valor fixo mas ainda precisamos

269
00:10:39,140 --> 00:10:40,970
ajustar isso

270
00:10:40,970 --> 00:10:42,620
A lista está funcional e respondendo

271
00:10:42,620 --> 00:10:44,720
as propriedades adequadamente, como a direção. Então já temos

272
00:10:44,720 --> 00:10:47,060
um bom começo! Agora na parte final é

273
00:10:47,060 --> 00:10:48,830
melhorar a lista colocando um

274
00:10:48,830 --> 00:10:50,600
template um pouco mais completo para mostrar

275
00:10:50,600 --> 00:10:52,160
mais recursos que esse componente de lista

276
00:10:52,160 --> 00:10:54,080
pode fornecer. A primeira delas é

277
00:10:54,080 --> 00:10:56,000
assim, eu preciso carregar os meus dados

278
00:10:56,000 --> 00:10:58,370
né? Eu fiz a requisição, carreguei o meu

279
00:10:58,370 --> 00:11:00,680
objeto, a minha resposta e agora eu quero

280
00:11:00,680 --> 00:11:04,040
mostrar essas informações dentro da lista Ok? Vamos lembrar

281
00:11:04,040 --> 00:11:06,020
aqui ó como é que o nosso

282
00:11:06,020 --> 00:11:08,840
objeto. São vários objetos em um

283
00:11:08,840 --> 00:11:11,000
vetor do objetos e cada um deles tem um atributo

284
00:11:11,000 --> 00:11:13,760
Name, Age, Photo e Personality, então eu

285
00:11:13,760 --> 00:11:16,430
posso acessar essas propriedades aqui.

286
00:11:16,430 --> 00:11:18,320
A primeira coisa que eu vou fazer é falar

287
00:11:18,320 --> 00:11:19,670
para a lista o nome do meu "iterator"

288
00:11:19,670 --> 00:11:22,220
A propriedade que recebe esse ID do iterator é o iteratorName

289
00:11:22,220 --> 00:11:24,260
Como é uma lista de

290
00:11:24,260 --> 00:11:26,150
cachorrinhos eu vou colocar o nome "dog"

291
00:11:26,150 --> 00:11:30,240
Certo? Então, cada objeto vai ter esse

292
00:11:30,240 --> 00:11:31,950
nome aqui, o que me permite acessar as

293
00:11:31,950 --> 00:11:34,740
propriedades do objeto por esse nome

294
00:11:34,740 --> 00:11:37,080
Vamos fazer um teste? Vamos trocar o "my list"

295
00:11:37,080 --> 00:11:38,819
aqui

296
00:11:38,819 --> 00:11:42,410
Que já está carregado

297
00:11:42,450 --> 00:11:43,730
por "@{dog.name}"

298
00:11:43,730 --> 00:11:48,570
Que é o a propriedade que a gente tem

299
00:11:48,570 --> 00:11:52,350
no objeto. Vamos salvar a modificação e espera subir

300
00:11:52,350 --> 00:11:56,220
novamente. Vamos a nossa

301
00:11:56,220 --> 00:11:58,280
aplicação Frontend e só precisamos

302
00:11:58,280 --> 00:12:01,530
atualizar e aqui está o resultado, os nomes estão sem espaçamento

303
00:12:01,530 --> 00:12:03,750
Mas dá para ver que mudou os nomes né?

304
00:12:03,750 --> 00:12:05,450
Então, está listado o nome de cada um dos bichos

305
00:12:05,450 --> 00:12:07,590
Eu esqueci de dizer que, se não

306
00:12:07,590 --> 00:12:09,540
passarmos um "iteratorName", se

307
00:12:09,540 --> 00:12:13,380
 tirarmos ele aqui, por padrão o Beagle

308
00:12:13,380 --> 00:12:15,300
vai definir um iteratorName padrão chamado "item".

309
00:12:15,300 --> 00:12:17,760
Então, se você não quiser passar um iteratorName

310
00:12:17,760 --> 00:12:19,770
o nome do campo teria que ser "@{item.name}"

311
00:12:19,770 --> 00:12:22,980
Deixaremos o iterator como "dog" mesmo porque fica mais

312
00:12:22,980 --> 00:12:25,440
claro o código. Agora vou dar uma

313
00:12:25,440 --> 00:12:27,450
melhorada nesse layout desse componente

314
00:12:27,450 --> 00:12:29,220
aqui a gente já aprendeu como é que

315
00:12:29,220 --> 00:12:31,200
carrega a lista como é que usa os itens

316
00:12:31,200 --> 00:12:33,990
que a gente carregou daquela a URL com mock

317
00:12:33,990 --> 00:12:35,970
então agora eu vou mostrar como é que

318
00:12:35,970 --> 00:12:38,430
melhora essa lista e como é que a gente

319
00:12:38,430 --> 00:12:40,260
pode usar outra propriedade de template

320
00:12:40,260 --> 00:12:42,090
que eu falei que ficou faltando como a

321
00:12:42,090 --> 00:12:44,290
gente sabe esse view aqui, ele espera um

322
00:12:44,290 --> 00:12:45,790
componente eu falei que podia ser um

323
00:12:45,790 --> 00:12:48,040
componente simples, como é o texto, ou um

324
00:12:48,040 --> 00:12:49,930
componente mais complexo... Então eu fiz

325
00:12:49,930 --> 00:12:52,870
uma função aqui e vou copia-la

326
00:12:52,870 --> 00:12:55,360
Essa função parece um pouco assustadora (Grande)

327
00:12:55,360 --> 00:12:57,610
Mas ela é bem simples...

328
00:12:57,610 --> 00:12:59,710
Ela representa a criação de um componente

329
00:12:59,710 --> 00:13:01,570
simples. Então eu tô criando um

330
00:13:01,570 --> 00:13:04,270
componente que eu chamei de "card". Ele tem

331
00:13:04,270 --> 00:13:06,160
um container e dentro desse container eu

332
00:13:06,160 --> 00:13:07,990
tenho outros componentes. No meu caso

333
00:13:07,990 --> 00:13:10,360
aqui eu tenho: uma imagem, três textos e

334
00:13:10,360 --> 00:13:12,760
um botão e eu coloquei aqui as outras

335
00:13:12,760 --> 00:13:15,760
propriedades. Então, para a imagem, eu passei a

336
00:13:15,760 --> 00:13:18,190
URL que tá lá no meu objeto, então aqui é que defino a foto

337
00:13:18,190 --> 00:13:21,700
Aqui foi definido o nome, a idade e a

338
00:13:21,700 --> 00:13:23,710
personalidade. Então do mesmo jeito que

339
00:13:23,710 --> 00:13:26,080
eu ensinei a fazer o "biding" para

340
00:13:26,080 --> 00:13:28,240
cada um dos items e podemos então

341
00:13:28,240 --> 00:13:30,640
substituir. Eu posso falar que esse

342
00:13:30,640 --> 00:13:31,830
template

343
00:13:31,830 --> 00:13:35,320
chama a função que cria um template que

344
00:13:35,320 --> 00:13:37,860
a "Card component" certo?

345
00:13:37,860 --> 00:13:42,110
Vamos rodar aqui e vamos aqui pro

346
00:13:42,110 --> 00:13:43,149
frontend

347
00:13:43,149 --> 00:13:44,709
atualiza

348
00:13:44,709 --> 00:13:49,310
e pronto, está carregado o nosso front tá. Eu fiz

349
00:13:49,310 --> 00:13:51,290
um card e tudo isso aqui está vindo do nosso

350
00:13:51,290 --> 00:13:53,930
objeto aqui, o nome, idade, foto, tudo está

351
00:13:53,930 --> 00:13:56,029
preenchendo o nosso card. A gente aplicou um

352
00:13:56,029 --> 00:13:57,709
pouquinho de estilo no card, e então ficou assim

353
00:13:57,709 --> 00:14:00,500
Agora uma coisa muito legal é que, além de eu

354
00:14:00,500 --> 00:14:52,180
poder fazer múltiplos templates, por exemplo

355
00:14:52,180 --> 00:14:03,529
eu poderia mostrar um card aqui

356
00:14:03,529 --> 00:14:06,829
só com a imagem e aqui outra coisa, eu

357
00:14:06,829 --> 00:14:08,600
poderia fazer isso com o Beagle. Essa funcionalidade

358
00:14:08,600 --> 00:14:10,310
permite que eu possa dar algum

359
00:14:10,310 --> 00:14:12,019
destaque para um desses cards... Então se

360
00:14:12,019 --> 00:14:14,209
por exemplo, eu quiser mudar o estilo

361
00:14:14,209 --> 00:14:16,190
desse terceiro card, eu consigo

362
00:14:16,190 --> 00:14:18,230
fazer isso só usando o Beagle, entendeu?

363
00:14:18,230 --> 00:14:20,570
Isso tá lá naquela propriedade que eu

364
00:14:20,570 --> 00:14:22,250
falei para vocês dos múltiplos. Então

365
00:14:22,250 --> 00:14:25,040
vamos lembrar aqui a gente recebe uma

366
00:14:25,040 --> 00:14:27,140
lista de templates. Eu tô passando um

367
00:14:27,140 --> 00:14:29,000
só. Mas se eu quiser, eu posso

368
00:14:29,000 --> 00:14:31,070
passar dois ou mais templates

369
00:14:31,070 --> 00:14:34,130
Então, eu vou passar o outro template aqui, que vai ser

370
00:14:34,130 --> 00:14:36,560
outra view, e que eu vou chamar de

371
00:14:36,560 --> 00:14:38,300
Cart component, pois e eu vou reutilizar essa

372
00:14:38,300 --> 00:14:40,250
função. Ai vamos fazer uma mudança

373
00:14:40,250 --> 00:14:42,740
aqui para eu aceitar um parâmetro que definirá

374
00:14:42,740 --> 00:14:45,020
um template e

375
00:14:45,020 --> 00:14:46,750
quando for outro template eu uso outro parâmetro

376
00:14:46,750 --> 00:14:49,190
Vamos alterar então a nossa função aqui

377
00:14:49,190 --> 00:14:52,280
que cria um componente para aceitar um parametro

378
00:14:52,280 --> 00:14:55,690
que eu vou chamar de "backgroundCustom"

379
00:14:55,690 --> 00:14:58,730
e vai ser uma String. Então eu vou

380
00:14:58,730 --> 00:15:00,740
aceitar um parâmetro agora para eu falar

381
00:15:00,740 --> 00:15:02,270
para o meu template: Quando acontecer

382
00:15:02,270 --> 00:15:04,400
alguma coisa eu quero usar um

383
00:15:04,400 --> 00:15:06,660
parâmetro, se não acontecer eu quero usar outro

384
00:15:06,660 --> 00:15:09,089
Eu vou passar aqui uma

385
00:15:09,089 --> 00:15:10,940
cor para

386
00:15:10,940 --> 00:15:14,290
esse Card

387
00:15:14,290 --> 00:15:17,390
e outra cor para esse outro Card

388
00:15:17,390 --> 00:15:19,180
e lá embaixo

389
00:15:19,180 --> 00:15:22,800
é a cor do

390
00:15:22,800 --> 00:15:26,029
do container né. Eu vou passar

391
00:15:26,029 --> 00:15:29,560
a minha variável

392
00:15:29,560 --> 00:15:32,460
Então aqui a gente está chamando template

393
00:15:32,460 --> 00:15:35,560
passando uma cor para cada, só que

394
00:15:35,560 --> 00:15:37,720
o que acontece até então... Eu tô passando uma cor para

395
00:15:37,720 --> 00:15:39,279
cada card mas eu não tô falando a condição que define

396
00:15:39,279 --> 00:15:42,070
quando eu quero uma cor ou outra. Então, é aí que

397
00:15:42,070 --> 00:15:45,690
entra a última das propriedades que

398
00:15:45,690 --> 00:15:49,649
compõem a lista, que é o "case". Essa propriedade

399
00:15:49,649 --> 00:15:52,199
define uma condição

400
00:15:52,199 --> 00:15:54,600
para usar essa lista. Então quando essa

401
00:15:54,600 --> 00:15:57,059
condição for verdade, essa view será usada

402
00:15:57,059 --> 00:15:59,069
se ela não for verdade, aí vai ser usada a

403
00:15:59,069 --> 00:16:01,319
outra view, e assim por diante. Se você não declarar um

404
00:16:01,319 --> 00:16:04,019
case, o padrão é assim: Esse

405
00:16:04,019 --> 00:16:06,819
case aqui, ele recebe uma expressão (um tipo de variável utilizada no Beagle)

406
00:16:06,819 --> 00:16:09,420
que vai converter a string recebida

407
00:16:09,420 --> 00:16:12,149
como parametro para um valor

408
00:16:12,149 --> 00:16:14,490
que está salvo no objeto.

409
00:16:14,490 --> 00:16:18,860
Outra funcionalidade do Beagle, são as operações

410
00:16:18,860 --> 00:16:20,410
E aqui utilizaremos uma, o "equals"

411
00:16:20,410 --> 00:16:21,699
Ou seja, com ela defino

412
00:16:21,699 --> 00:16:25,019
que, quando o "dog.name" for

413
00:16:25,019 --> 00:16:28,310
for igual

414
00:16:28,310 --> 00:16:30,340
a "Pluto"

415
00:16:30,880 --> 00:16:34,040
use este template. Então, quando esta

416
00:16:34,040 --> 00:16:36,470
condição for encontrada, use este template, se não for

417
00:16:36,470 --> 00:16:40,960
a propriedade template verifica a proxima opção. Vamos

418
00:16:41,370 --> 00:16:46,209
salvar vamos no frontend atualizar a página

419
00:16:46,209 --> 00:16:48,550
E pronto, mudou a cor, tá vendo? Os outros cards

420
00:16:48,550 --> 00:16:49,990
continuam com mo template antigo

421
00:16:49,990 --> 00:16:52,089
e esse aqui que foi que eu escolhi

422
00:16:52,089 --> 00:16:54,850
porque o nome dele é "Pluto" modificou a cor

423
00:16:54,850 --> 00:16:57,689
de fundo. Dessa forma podemos

424
00:16:57,689 --> 00:17:00,069
misturar vários templates, várias funcionalidades

425
00:17:00,069 --> 00:17:03,429
práticas para atingir o que gente precisa

426
00:17:03,429 --> 00:17:05,709
É isso pessoal, é muito legal a list view viu, né!

427
00:17:05,709 --> 00:17:08,679
Então já sabe, deixe seu like se inscreva

428
00:17:08,679 --> 00:17:10,898
no canal e qualquer dúvida comente aqui embaixo

429
00:17:10,898 --> 00:17:14,158
ou em nossos fóruns! Obrigado e até a próxima

